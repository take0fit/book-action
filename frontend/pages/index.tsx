import gql from "graphql-tag";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { urqlClient } from "@/src/libs/gql-requests";
import styles from "../styles/Home.module.css";
import {GetUsersDocument} from "@/src/graphql/generated.graphql";

type Props = {
    users: {
        id: string;
        userName: string;
    }[]
};

const Home: NextPage<Props> = (props) => {
  return (
      <div className={styles.main}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

          <main className={styles.main}>
              <h1>Hello, GraphQL</h1>
              <ul className={styles.grid}>
                  {props.users.map((user) => (
                      <li className={styles.content} key={user.id}>
                          id: {user.id} nickname: {user.nickname} age: {user.age}
                      </li>
                  ))}
              </ul>
          </main>

          <footer>
              <a
                  href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                  target="_blank"
                  rel="noopener noreferrer"
              >
                  Powered by{" "}
                  <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
          </a>
        </footer>
      </div>
  );
};

export const getServerSideProps: GetServerSideProps<Props> = async () => {
    try {
        const client = await urqlClient();

        const result = await client.query(GetUsersDocument, {}).toPromise();
        console.log(result)
        if (!result.data || !result.data.users) {
            console.error('No data returned from GraphQL query');
            return { notFound: true };
        }

        return {
            props: {
                users: result.data.users,
            },
        };
    } catch (e) {
        // @ts-ignore
        console.error('Error during fetch data:', e.message);
        return {
            props: {
        // @ts-ignore
                error: e.message
            },
            notFound: true,
        };
    }
};

export default Home;