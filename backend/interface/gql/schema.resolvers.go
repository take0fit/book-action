package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/take0fit/knowledge-out/interface/gql/generated"
	"github.com/take0fit/knowledge-out/interface/gql/model"
	"github.com/take0fit/knowledge-out/internal/application/dto"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, nickname string, birthday *string) (*model.User, error) {
	inputUser := dto.NewInputCreateUser(nickname, birthday)
	user, err := r.userUsecase.CreateUser(ctx, inputUser)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	gqlUser := &model.User{
		ID:       user.Id,
		Nickname: user.Nickname,
		Birthday: user.Birthday,
		Age:      user.Age,
	}

	return gqlUser, err
}

// CreateResource is the resolver for the createResource field.
func (r *mutationResolver) CreateResource(ctx context.Context, userID string, resourceName string, resourceDetail *string, resourceCategoryID int) (*model.Resource, error) {
	inputResource := dto.NewInputCreateResource(
		userID,
		resourceName,
		resourceDetail,
		resourceCategoryID,
	)
	resource, err := r.resourceUsecase.CreateResource(ctx, inputResource)
	if err != nil {
		return nil, fmt.Errorf("failed to create resource: %w", err)
	}

	gqlResource := &model.Resource{
		ID:                 resource.Id,
		ResourceName:       resource.Name,
		ResourceDetail:     resource.Detail,
		ResourceCategoryID: resource.CategoryId,
	}

	return gqlResource, err
}

// CreateInput is the resolver for the createInput field.
func (r *mutationResolver) CreateInput(ctx context.Context, userID string, resourceID string, inputName string, inputDetail *string, inputCategoryID int) (*model.Input, error) {
	inputInput := dto.NewInputCreateInput(
		userID,
		resourceID,
		inputName,
		inputDetail,
		inputCategoryID,
	)
	input, err := r.inputUsecase.CreateInput(ctx, inputInput)
	if err != nil {
		return nil, fmt.Errorf("failed to create input: %w", err)
	}

	gqlInput := &model.Input{
		ID:              input.Id,
		InputName:       input.Name,
		InputDetail:     input.Detail,
		InputCategoryID: input.CategoryId,
	}

	return gqlInput, err
}

// CreateOutput is the resolver for the createOutput field.
func (r *mutationResolver) CreateOutput(ctx context.Context, userID string, inputIds []string, outputName string, outputDetail *string, outputCategoryID int) (*model.Output, error) {
	inputOutput := dto.NewInputCreateOutput(
		userID,
		inputIds,
		outputName,
		outputDetail,
		outputCategoryID,
	)
	output, err := r.outputUsecase.CreateOutput(ctx, inputOutput)
	if err != nil {
		return nil, fmt.Errorf("failed to create output: %w", err)
	}

	gqlOutput := &model.Output{
		ID:         output.Id,
		OutputName: output.Name,
	}

	return gqlOutput, err
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.userUsecase.GetUserList()
	if err != nil {
		return nil, err
	}

	var gqlUsers []*model.User
	for _, user := range users {
		gqlUsers = append(gqlUsers, &model.User{
			ID:       user.Id,
			Nickname: user.Nickname,
			Age:      user.Age,
			Birthday: user.Birthday,
		})
	}

	return gqlUsers, err
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, err := r.userUsecase.GetUserDetails(id)
	if err != nil {
		return nil, err
	}

	gqlUser := &model.User{
		ID:        user.Id,
		Nickname:  user.Nickname,
		Resources: nil,
	}

	return gqlUser, err
}

// ResourcesByUserID is the resolver for the resourcesByUserId field.
func (r *queryResolver) ResourcesByUserID(ctx context.Context, userID string) ([]*model.Resource, error) {
	resources, err := r.resourceUsecase.GetResourceListByUserId(userID)
	if err != nil {
		return nil, err
	}

	var gqlResources []*model.Resource
	for _, resource := range resources {
		gqlResources = append(gqlResources, &model.Resource{
			ID:                 resource.Id,
			UserID:             resource.UserId,
			ResourceName:       resource.Name,
			ResourceDetail:     resource.Detail,
			ResourceCategoryID: resource.CategoryId,
			CreatedAt:          resource.CreatedAt,
			UpdatedAt:          resource.UpdatedAt,
			Inputs:             nil,
		})
	}

	return gqlResources, err
}

// Resource is the resolver for the resource field.
func (r *queryResolver) Resource(ctx context.Context, id string) (*model.Resource, error) {
	resource, err := r.resourceUsecase.GetResourceDetails(id)
	if err != nil {
		return nil, err
	}

	gqlResource := &model.Resource{
		ID:                 resource.Id,
		UserID:             resource.UserId,
		ResourceName:       resource.Name,
		ResourceDetail:     resource.Detail,
		ResourceCategoryID: resource.CategoryId,
		CreatedAt:          resource.CreatedAt,
		UpdatedAt:          resource.UpdatedAt,
		Inputs:             nil,
	}

	return gqlResource, err
}

// InputsByUserID is the resolver for the inputsByUserId field.
func (r *queryResolver) InputsByUserID(ctx context.Context, userID string) ([]*model.Input, error) {
	inputs, err := r.inputUsecase.GetInputListByUserId(userID)
	if err != nil {
		return nil, err
	}

	var gqlInputs []*model.Input
	for _, input := range inputs {
		gqlInputs = append(gqlInputs, &model.Input{
			ID:              input.Id,
			UserID:          input.UserId,
			ResourceID:      input.ResourceId,
			InputName:       input.Name,
			InputDetail:     input.Detail,
			InputCategoryID: input.CategoryId,
			CreatedAt:       input.CreatedAt,
			UpdatedAt:       input.UpdatedAt,
			Outputs:         nil,
		})
	}

	return gqlInputs, err
}

// Input is the resolver for the input field.
func (r *queryResolver) Input(ctx context.Context, id string) (*model.Input, error) {
	input, err := r.inputUsecase.GetInputDetails(id)
	if err != nil {
		return nil, err
	}

	gqlInput := &model.Input{
		ID:              input.Id,
		UserID:          input.UserId,
		ResourceID:      input.ResourceId,
		InputName:       input.Name,
		InputDetail:     input.Detail,
		InputCategoryID: input.CategoryId,
		CreatedAt:       input.CreatedAt,
		UpdatedAt:       input.UpdatedAt,
		Outputs:         nil,
	}

	return gqlInput, err
}

// OutputsByUserID is the resolver for the outputsByUserId field.
func (r *queryResolver) OutputsByUserID(ctx context.Context, userID string) ([]*model.Output, error) {
	outputs, err := r.outputUsecase.GetOutputListByUserId(userID)
	if err != nil {
		return nil, err
	}

	var gqlOutputs []*model.Output
	for _, output := range outputs {
		gqlOutputs = append(gqlOutputs, &model.Output{
			ID:               output.Id,
			UserID:           output.UserId,
			OutputName:       output.Name,
			OutputDetail:     output.Detail,
			OutputCategoryID: output.CategoryId,
			CreatedAt:        output.CreatedAt,
			UpdatedAt:        output.UpdatedAt,
		})
	}

	return gqlOutputs, err
}

// Output is the resolver for the output field.
func (r *queryResolver) Output(ctx context.Context, id string) (*model.Output, error) {
	output, err := r.outputUsecase.GetOutputDetails(id)
	if err != nil {
		return nil, err
	}

	gqlOutput := &model.Output{
		ID:               output.Id,
		UserID:           output.UserId,
		OutputName:       output.Name,
		OutputDetail:     output.Detail,
		OutputCategoryID: output.CategoryId,
		CreatedAt:        output.CreatedAt,
		UpdatedAt:        output.UpdatedAt,
	}

	return gqlOutput, err
}

// Resources is the resolver for the resources field.
func (r *userResolver) Resources(ctx context.Context, obj *model.User) ([]*model.Resource, error) {
	resources, err := r.resourceUsecase.GetResourceListByUserId(obj.ID)
	if err != nil {
		return nil, err
	}

	var gqlResources []*model.Resource
	for _, resource := range resources {
		gqlResources = append(gqlResources, &model.Resource{
			ID:                 resource.Id,
			UserID:             resource.UserId,
			ResourceName:       resource.Name,
			ResourceDetail:     resource.Detail,
			ResourceCategoryID: resource.CategoryId,
			CreatedAt:          resource.CreatedAt,
			UpdatedAt:          resource.UpdatedAt,
			Inputs:             nil,
		})
	}

	return gqlResources, err
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) Resources(ctx context.Context) ([]*model.Resource, error) {
	panic(fmt.Errorf("not implemented: Resources - resources"))
}
func (r *queryResolver) Inputs(ctx context.Context) ([]*model.Input, error) {
	panic(fmt.Errorf("not implemented: Inputs - inputs"))
}
func (r *queryResolver) Outputs(ctx context.Context) ([]*model.Output, error) {
	panic(fmt.Errorf("not implemented: Outputs - outputs"))
}
